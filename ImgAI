{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNN6KysADJtzY8iH0QAZ+oG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/K0sh0/AI/blob/main/ImgAI\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QqKPRbj-BLgx"
      },
      "outputs": [],
      "source": [
        "$ pip install dalle2-pytorch"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "To train DALLE-2 is a 3 step process, with the training of CLIP being the most important\n",
        "\n",
        "To train CLIP, you can either use x-clip package, or join the LAION discord, where a lot of replication efforts are already underway.\n",
        "\n",
        "This repository will demonstrate integration with x-clip for starters"
      ],
      "metadata": {
        "id": "g5BpS8txC6oB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from dalle2_pytorch import CLIP\n",
        "\n",
        "clip = CLIP(\n",
        "    dim_text = 512,\n",
        "    dim_image = 512,\n",
        "    dim_latent = 512,\n",
        "    num_text_tokens = 49408,\n",
        "    text_enc_depth = 1,\n",
        "    text_seq_len = 256,\n",
        "    text_heads = 8,\n",
        "    visual_enc_depth = 1,\n",
        "    visual_image_size = 256,\n",
        "    visual_patch_size = 32,\n",
        "    visual_heads = 8,\n",
        "    use_all_token_embeds = True,            # whether to use fine-grained contrastive learning (FILIP)\n",
        "    decoupled_contrastive_learning = True,  # use decoupled contrastive learning (DCL) objective function, removing positive pairs from the denominator of the InfoNCE loss (CLOOB + DCL)\n",
        "    extra_latent_projection = True,         # whether to use separate projections for text-to-image vs image-to-text comparisons (CLOOB)\n",
        "    use_visual_ssl = True,                  # whether to do self supervised learning on images\n",
        "    visual_ssl_type = 'simclr',             # can be either 'simclr' or 'simsiam', depending on using DeCLIP or SLIP\n",
        "    use_mlm = False,                        # use masked language learning (MLM) on text (DeCLIP)\n",
        "    text_ssl_loss_weight = 0.05,            # weight for text MLM loss\n",
        "    image_ssl_loss_weight = 0.05            # weight for image self-supervised learning loss\n",
        ").cuda()\n",
        "\n",
        "# mock data\n",
        "\n",
        "text = torch.randint(0, 49408, (4, 256)).cuda()\n",
        "images = torch.randn(4, 3, 256, 256).cuda()\n",
        "\n",
        "# train\n",
        "\n",
        "loss = clip(\n",
        "    text,\n",
        "    images,\n",
        "    return_loss = True              # needs to be set to True to return contrastive loss\n",
        ")\n",
        "\n",
        "loss.backward()\n",
        "\n",
        "# do the above with as many texts and images as possible in a loop"
      ],
      "metadata": {
        "id": "TpHpA-otBdT-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Then, you will need to train the decoder, which learns to generate images based on the image embedding coming from the trained CLIP above"
      ],
      "metadata": {
        "id": "sUk_akn_C_tW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from dalle2_pytorch import Unet, Decoder, CLIP\n",
        "\n",
        "# trained clip from step 1\n",
        "\n",
        "clip = CLIP(\n",
        "    dim_text = 512,\n",
        "    dim_image = 512,\n",
        "    dim_latent = 512,\n",
        "    num_text_tokens = 49408,\n",
        "    text_enc_depth = 1,\n",
        "    text_seq_len = 256,\n",
        "    text_heads = 8,\n",
        "    visual_enc_depth = 1,\n",
        "    visual_image_size = 256,\n",
        "    visual_patch_size = 32,\n",
        "    visual_heads = 8\n",
        ").cuda()\n",
        "\n",
        "# unet for the decoder\n",
        "\n",
        "unet = Unet(\n",
        "    dim = 128,\n",
        "    image_embed_dim = 512,\n",
        "    cond_dim = 128,\n",
        "    channels = 3,\n",
        "    dim_mults=(1, 2, 4, 8)\n",
        ").cuda()\n",
        "\n",
        "# decoder, which contains the unet and clip\n",
        "\n",
        "decoder = Decoder(\n",
        "    unet = unet,\n",
        "    clip = clip,\n",
        "    timesteps = 100,\n",
        "    image_cond_drop_prob = 0.1,\n",
        "    text_cond_drop_prob = 0.5\n",
        ").cuda()\n",
        "\n",
        "# mock images (get a lot of this)\n",
        "\n",
        "images = torch.randn(4, 3, 256, 256).cuda()\n",
        "\n",
        "# feed images into decoder\n",
        "\n",
        "loss = decoder(images)\n",
        "loss.backward()\n",
        "\n",
        "# do the above for many many many many steps\n",
        "# then it will learn to generate images based on the CLIP image embeddings"
      ],
      "metadata": {
        "id": "TehD5xm2BlCD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Finally, the main contribution of the paper. The repository offers the diffusion prior network. It takes the CLIP text embeddings and tries to generate the CLIP image embeddings. Again, you will need the trained CLIP from the first step"
      ],
      "metadata": {
        "id": "3z6Y5gErDCjl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from dalle2_pytorch import DiffusionPriorNetwork, DiffusionPrior, CLIP\n",
        "\n",
        "# get trained CLIP from step one\n",
        "\n",
        "clip = CLIP(\n",
        "    dim_text = 512,\n",
        "    dim_image = 512,\n",
        "    dim_latent = 512,\n",
        "    num_text_tokens = 49408,\n",
        "    text_enc_depth = 6,\n",
        "    text_seq_len = 256,\n",
        "    text_heads = 8,\n",
        "    visual_enc_depth = 6,\n",
        "    visual_image_size = 256,\n",
        "    visual_patch_size = 32,\n",
        "    visual_heads = 8,\n",
        ").cuda()\n",
        "\n",
        "# setup prior network, which contains an autoregressive transformer\n",
        "\n",
        "prior_network = DiffusionPriorNetwork(\n",
        "    dim = 512,\n",
        "    depth = 6,\n",
        "    dim_head = 64,\n",
        "    heads = 8\n",
        ").cuda()\n",
        "\n",
        "# diffusion prior network, which contains the CLIP and network (with transformer) above\n",
        "\n",
        "diffusion_prior = DiffusionPrior(\n",
        "    net = prior_network,\n",
        "    clip = clip,\n",
        "    timesteps = 100,\n",
        "    cond_drop_prob = 0.2\n",
        ").cuda()\n",
        "\n",
        "# mock data\n",
        "\n",
        "text = torch.randint(0, 49408, (4, 256)).cuda()\n",
        "images = torch.randn(4, 3, 256, 256).cuda()\n",
        "\n",
        "# feed text and images into diffusion prior network\n",
        "\n",
        "loss = diffusion_prior(text, images)\n",
        "loss.backward()\n",
        "\n",
        "# do the above for many many many steps\n",
        "# now the diffusion prior can generate image embeddings from the text embeddings"
      ],
      "metadata": {
        "id": "NxmnV1SkBtBr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "In the paper, they actually used a recently discovered technique, from Jonathan Ho himself (original author of DDPMs, the core technique used in DALL-E v2) for high resolution image synthesis.\n",
        "\n",
        "This can easily be used within this framework as so"
      ],
      "metadata": {
        "id": "dDJ2H8BEDJpB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from dalle2_pytorch import Unet, Decoder, CLIP\n",
        "\n",
        "# trained clip from step 1\n",
        "\n",
        "clip = CLIP(\n",
        "    dim_text = 512,\n",
        "    dim_image = 512,\n",
        "    dim_latent = 512,\n",
        "    num_text_tokens = 49408,\n",
        "    text_enc_depth = 6,\n",
        "    text_seq_len = 256,\n",
        "    text_heads = 8,\n",
        "    visual_enc_depth = 6,\n",
        "    visual_image_size = 256,\n",
        "    visual_patch_size = 32,\n",
        "    visual_heads = 8\n",
        ").cuda()\n",
        "\n",
        "# 2 unets for the decoder (a la cascading DDPM)\n",
        "\n",
        "unet1 = Unet(\n",
        "    dim = 32,\n",
        "    image_embed_dim = 512,\n",
        "    cond_dim = 128,\n",
        "    channels = 3,\n",
        "    dim_mults = (1, 2, 4, 8)\n",
        ").cuda()\n",
        "\n",
        "unet2 = Unet(\n",
        "    dim = 32,\n",
        "    image_embed_dim = 512,\n",
        "    cond_dim = 128,\n",
        "    channels = 3,\n",
        "    dim_mults = (1, 2, 4, 8, 16)\n",
        ").cuda()\n",
        "\n",
        "# decoder, which contains the unet(s) and clip\n",
        "\n",
        "decoder = Decoder(\n",
        "    clip = clip,\n",
        "    unet = (unet1, unet2),            # insert both unets in order of low resolution to highest resolution (you can have as many stages as you want here)\n",
        "    image_sizes = (256, 512),         # resolutions, 256 for first unet, 512 for second. these must be unique and in ascending order (matches with the unets passed in)\n",
        "    timesteps = 1000,\n",
        "    image_cond_drop_prob = 0.1,\n",
        "    text_cond_drop_prob = 0.5\n",
        ").cuda()\n",
        "\n",
        "# mock images (get a lot of this)\n",
        "\n",
        "images = torch.randn(4, 3, 512, 512).cuda()\n",
        "\n",
        "# feed images into decoder, specifying which unet you want to train\n",
        "# each unet can be trained separately, which is one of the benefits of the cascading DDPM scheme\n",
        "\n",
        "loss = decoder(images, unet_number = 1)\n",
        "loss.backward()\n",
        "\n",
        "loss = decoder(images, unet_number = 2)\n",
        "loss.backward()\n",
        "\n",
        "# do the above for many steps for both unets"
      ],
      "metadata": {
        "id": "9as0mei7Bx_6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Finally, to generate the DALL-E2 images from text. Insert the trained DiffusionPrior as well as the Decoder (which wraps CLIP, the causal transformer, and unet(s))"
      ],
      "metadata": {
        "id": "yBK7ronDDNm1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from dalle2_pytorch import DALLE2\n",
        "\n",
        "dalle2 = DALLE2(\n",
        "    prior = diffusion_prior,\n",
        "    decoder = decoder\n",
        ")\n",
        "\n",
        "# send the text as a string if you want to use the simple tokenizer from DALLE v1\n",
        "# or you can do it as token ids, if you have your own tokenizer\n",
        "\n",
        "texts = ['glistening morning dew on a flower petal']\n",
        "images = dalle2(texts) # (1, 3, 256, 256)"
      ],
      "metadata": {
        "id": "csQ0m9vjB3uz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "That's it!\n",
        "\n",
        "Let's see the whole script below"
      ],
      "metadata": {
        "id": "53tnrKq1DSie"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from dalle2_pytorch import DALLE2, DiffusionPriorNetwork, DiffusionPrior, Unet, Decoder, CLIP\n",
        "\n",
        "clip = CLIP(\n",
        "    dim_text = 512,\n",
        "    dim_image = 512,\n",
        "    dim_latent = 512,\n",
        "    num_text_tokens = 49408,\n",
        "    text_enc_depth = 6,\n",
        "    text_seq_len = 256,\n",
        "    text_heads = 8,\n",
        "    visual_enc_depth = 6,\n",
        "    visual_image_size = 256,\n",
        "    visual_patch_size = 32,\n",
        "    visual_heads = 8\n",
        ").cuda()\n",
        "\n",
        "# mock data\n",
        "\n",
        "text = torch.randint(0, 49408, (4, 256)).cuda()\n",
        "images = torch.randn(4, 3, 256, 256).cuda()\n",
        "\n",
        "# train\n",
        "\n",
        "loss = clip(\n",
        "    text,\n",
        "    images,\n",
        "    return_loss = True\n",
        ")\n",
        "\n",
        "loss.backward()\n",
        "\n",
        "# do above for many steps ...\n",
        "\n",
        "# prior networks (with transformer)\n",
        "\n",
        "prior_network = DiffusionPriorNetwork(\n",
        "    dim = 512,\n",
        "    depth = 6,\n",
        "    dim_head = 64,\n",
        "    heads = 8\n",
        ").cuda()\n",
        "\n",
        "diffusion_prior = DiffusionPrior(\n",
        "    net = prior_network,\n",
        "    clip = clip,\n",
        "    timesteps = 100,\n",
        "    cond_drop_prob = 0.2\n",
        ").cuda()\n",
        "\n",
        "loss = diffusion_prior(text, images)\n",
        "loss.backward()\n",
        "\n",
        "# do above for many steps ...\n",
        "\n",
        "# decoder (with unet)\n",
        "\n",
        "unet1 = Unet(\n",
        "    dim = 128,\n",
        "    image_embed_dim = 512,\n",
        "    cond_dim = 128,\n",
        "    channels = 3,\n",
        "    dim_mults=(1, 2, 4, 8)\n",
        ").cuda()\n",
        "\n",
        "unet2 = Unet(\n",
        "    dim = 16,\n",
        "    image_embed_dim = 512,\n",
        "    cond_dim = 128,\n",
        "    channels = 3,\n",
        "    dim_mults = (1, 2, 4, 8, 16)\n",
        ").cuda()\n",
        "\n",
        "decoder = Decoder(\n",
        "    unet = (unet1, unet2),\n",
        "    image_sizes = (128, 256),\n",
        "    clip = clip,\n",
        "    timesteps = 100,\n",
        "    image_cond_drop_prob = 0.1,\n",
        "    text_cond_drop_prob = 0.5,\n",
        "    condition_on_text_encodings = False  # set this to True if you wish to condition on text during training and sampling\n",
        ").cuda()\n",
        "\n",
        "for unet_number in (1, 2):\n",
        "    loss = decoder(images, unet_number = unet_number) # this can optionally be decoder(images, text) if you wish to condition on the text encodings as well, though it was hinted in the paper it didn't do much\n",
        "    loss.backward()\n",
        "\n",
        "# do above for many steps\n",
        "\n",
        "dalle2 = DALLE2(\n",
        "    prior = diffusion_prior,\n",
        "    decoder = decoder\n",
        ")\n",
        "\n",
        "images = dalle2(\n",
        "    ['cute puppy chasing after a squirrel'],\n",
        "    cond_scale = 2. # classifier free guidance strength (> 1 would strengthen the condition)\n",
        ")\n",
        "\n",
        "# save your image (in this example, of size 256x256)"
      ],
      "metadata": {
        "id": "szXkXlvcB8jd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Everything in this readme should run without error\n",
        "\n",
        "You can also train the decoder on images of greater than the size (say 512x512) at which CLIP was trained (256x256). The images will be resized to CLIP image resolution for the image embeddings\n",
        "\n",
        "For the layperson, no worries, training will all be automated into a CLI tool, at least for small scale training.\n",
        "\n",
        "Training on Preprocessed CLIP Embeddings\n",
        "It is likely, when scaling up, that you would first preprocess your images and text into corresponding embeddings before training the prior network. You can do so easily by simply passing in image_embed, text_embed, and optionally text_encodings and text_mask\n",
        "\n",
        "Working example below"
      ],
      "metadata": {
        "id": "HmPlyL7DDWjg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from dalle2_pytorch import DiffusionPriorNetwork, DiffusionPrior, CLIP\n",
        "\n",
        "# get trained CLIP from step one\n",
        "\n",
        "clip = CLIP(\n",
        "    dim_text = 512,\n",
        "    dim_image = 512,\n",
        "    dim_latent = 512,\n",
        "    num_text_tokens = 49408,\n",
        "    text_enc_depth = 6,\n",
        "    text_seq_len = 256,\n",
        "    text_heads = 8,\n",
        "    visual_enc_depth = 6,\n",
        "    visual_image_size = 256,\n",
        "    visual_patch_size = 32,\n",
        "    visual_heads = 8,\n",
        ").cuda()\n",
        "\n",
        "# setup prior network, which contains an autoregressive transformer\n",
        "\n",
        "prior_network = DiffusionPriorNetwork(\n",
        "    dim = 512,\n",
        "    depth = 6,\n",
        "    dim_head = 64,\n",
        "    heads = 8\n",
        ").cuda()\n",
        "\n",
        "# diffusion prior network, which contains the CLIP and network (with transformer) above\n",
        "\n",
        "diffusion_prior = DiffusionPrior(\n",
        "    net = prior_network,\n",
        "    clip = clip,\n",
        "    timesteps = 100,\n",
        "    cond_drop_prob = 0.2,\n",
        "    condition_on_text_encodings = False  # this probably should be true, but just to get Laion started\n",
        ").cuda()\n",
        "\n",
        "# mock data\n",
        "\n",
        "text = torch.randint(0, 49408, (4, 256)).cuda()\n",
        "images = torch.randn(4, 3, 256, 256).cuda()\n",
        "\n",
        "# precompute the text and image embeddings\n",
        "# here using the diffusion prior class, but could be done with CLIP alone\n",
        "\n",
        "clip_image_embeds = diffusion_prior.clip.embed_image(images).image_embed\n",
        "clip_text_embeds = diffusion_prior.clip.embed_text(text).text_embed\n",
        "\n",
        "# feed text and images into diffusion prior network\n",
        "\n",
        "loss = diffusion_prior(\n",
        "    text_embed = clip_text_embeds,\n",
        "    image_embed = clip_image_embeds\n",
        ")\n",
        "\n",
        "loss.backward()\n",
        "\n",
        "# do the above for many many many steps\n",
        "# now the diffusion prior can generate image embeddings from the text embeddings"
      ],
      "metadata": {
        "id": "SScT-3a4CFAv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "You can also completely go CLIP-less, in which case you will need to pass in the image_embed_dim into the DiffusionPrior on initialization"
      ],
      "metadata": {
        "id": "AVtJubXoDcFi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from dalle2_pytorch import DiffusionPriorNetwork, DiffusionPrior\n",
        "\n",
        "# setup prior network, which contains an autoregressive transformer\n",
        "\n",
        "prior_network = DiffusionPriorNetwork(\n",
        "    dim = 512,\n",
        "    depth = 6,\n",
        "    dim_head = 64,\n",
        "    heads = 8\n",
        ").cuda()\n",
        "\n",
        "# diffusion prior network, which contains the CLIP and network (with transformer) above\n",
        "\n",
        "diffusion_prior = DiffusionPrior(\n",
        "    net = prior_network,\n",
        "    image_embed_dim = 512,               # this needs to be set\n",
        "    timesteps = 100,\n",
        "    cond_drop_prob = 0.2,\n",
        "    condition_on_text_encodings = False  # this probably should be true, but just to get Laion started\n",
        ").cuda()\n",
        "\n",
        "# mock data\n",
        "\n",
        "text = torch.randint(0, 49408, (4, 256)).cuda()\n",
        "images = torch.randn(4, 3, 256, 256).cuda()\n",
        "\n",
        "# precompute the text and image embeddings\n",
        "# here using the diffusion prior class, but could be done with CLIP alone\n",
        "\n",
        "clip_image_embeds = torch.randn(4, 512).cuda()\n",
        "clip_text_embeds = torch.randn(4, 512).cuda()\n",
        "\n",
        "# feed text and images into diffusion prior network\n",
        "\n",
        "loss = diffusion_prior(\n",
        "    text_embed = clip_text_embeds,\n",
        "    image_embed = clip_image_embeds\n",
        ")\n",
        "\n",
        "loss.backward()\n",
        "\n",
        "# do the above for many many many steps\n",
        "# now the diffusion prior can generate image embeddings from the text embeddings"
      ],
      "metadata": {
        "id": "k3UeHhJYCGJL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "OpenAI CLIP\n",
        "Although there is the possibility they are using an unreleased, more powerful CLIP, you can use one of the released ones, if you do not wish to train your own CLIP from scratch. This will also allow the community to more quickly validate the conclusions of the paper.\n",
        "\n",
        "To use a pretrained OpenAI CLIP, simply import OpenAIClipAdapter and pass it into the DiffusionPrior or Decoder like so"
      ],
      "metadata": {
        "id": "qBW9bbMUDhBe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from dalle2_pytorch import DALLE2, DiffusionPriorNetwork, DiffusionPrior, Unet, Decoder, OpenAIClipAdapter\n",
        "\n",
        "# openai pretrained clip - defaults to ViT-B/32\n",
        "\n",
        "clip = OpenAIClipAdapter()\n",
        "\n",
        "# mock data\n",
        "\n",
        "text = torch.randint(0, 49408, (4, 256)).cuda()\n",
        "images = torch.randn(4, 3, 256, 256).cuda()\n",
        "\n",
        "# prior networks (with transformer)\n",
        "\n",
        "prior_network = DiffusionPriorNetwork(\n",
        "    dim = 512,\n",
        "    depth = 6,\n",
        "    dim_head = 64,\n",
        "    heads = 8\n",
        ").cuda()\n",
        "\n",
        "diffusion_prior = DiffusionPrior(\n",
        "    net = prior_network,\n",
        "    clip = clip,\n",
        "    timesteps = 100,\n",
        "    cond_drop_prob = 0.2\n",
        ").cuda()\n",
        "\n",
        "loss = diffusion_prior(text, images)\n",
        "loss.backward()\n",
        "\n",
        "# do above for many steps ...\n",
        "\n",
        "# decoder (with unet)\n",
        "\n",
        "unet1 = Unet(\n",
        "    dim = 128,\n",
        "    image_embed_dim = 512,\n",
        "    cond_dim = 128,\n",
        "    channels = 3,\n",
        "    dim_mults=(1, 2, 4, 8)\n",
        ").cuda()\n",
        "\n",
        "unet2 = Unet(\n",
        "    dim = 16,\n",
        "    image_embed_dim = 512,\n",
        "    cond_dim = 128,\n",
        "    channels = 3,\n",
        "    dim_mults = (1, 2, 4, 8, 16)\n",
        ").cuda()\n",
        "\n",
        "decoder = Decoder(\n",
        "    unet = (unet1, unet2),\n",
        "    image_sizes = (128, 256),\n",
        "    clip = clip,\n",
        "    timesteps = 100,\n",
        "    image_cond_drop_prob = 0.1,\n",
        "    text_cond_drop_prob = 0.5,\n",
        "    condition_on_text_encodings = False  # set this to True if you wish to condition on text during training and sampling\n",
        ").cuda()\n",
        "\n",
        "for unet_number in (1, 2):\n",
        "    loss = decoder(images, unet_number = unet_number) # this can optionally be decoder(images, text) if you wish to condition on the text encodings as well, though it was hinted in the paper it didn't do much\n",
        "    loss.backward()\n",
        "\n",
        "# do above for many steps\n",
        "\n",
        "dalle2 = DALLE2(\n",
        "    prior = diffusion_prior,\n",
        "    decoder = decoder\n",
        ")\n",
        "\n",
        "images = dalle2(\n",
        "    ['a butterfly trying to escape a tornado'],\n",
        "    cond_scale = 2. # classifier free guidance strength (> 1 would strengthen the condition)\n",
        ")\n",
        "\n",
        "# save your image (in this example, of size 256x256)"
      ],
      "metadata": {
        "id": "Cn8AavIaCJSD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now you'll just have to worry about training the Prior and the Decoder!\n",
        "\n",
        "Experimental\n",
        "DALL-E2 with Latent Diffusion\n",
        "This repository decides to take the next step and offer DALL-E v2 combined with latent diffusion, from Rombach et al.\n",
        "\n",
        "You can use it as follows. Latent diffusion can be limited to just the first U-Net in the cascade, or to any number you wish.\n",
        "\n",
        "The repository also comes equipped with all the necessary settings to recreate ViT-VQGan from the Improved VQGans paper. Furthermore, the vector quantization library also comes equipped to do residual or multi-headed quantization, which I believe will give an even further boost in performance to the autoencoder."
      ],
      "metadata": {
        "id": "zVsJ34b4Dlkx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from dalle2_pytorch import Unet, Decoder, CLIP, VQGanVAE\n",
        "\n",
        "# trained clip from step 1\n",
        "\n",
        "clip = CLIP(\n",
        "    dim_text = 512,\n",
        "    dim_image = 512,\n",
        "    dim_latent = 512,\n",
        "    num_text_tokens = 49408,\n",
        "    text_enc_depth = 1,\n",
        "    text_seq_len = 256,\n",
        "    text_heads = 8,\n",
        "    visual_enc_depth = 1,\n",
        "    visual_image_size = 256,\n",
        "    visual_patch_size = 32,\n",
        "    visual_heads = 8\n",
        ")\n",
        "\n",
        "# 3 unets for the decoder (a la cascading DDPM)\n",
        "\n",
        "# first two unets are doing latent diffusion\n",
        "# vqgan-vae must be trained beforehand\n",
        "\n",
        "vae1 = VQGanVAE(\n",
        "    dim = 32,\n",
        "    image_size = 256,\n",
        "    layers = 3,\n",
        "    layer_mults = (1, 2, 4)\n",
        ")\n",
        "\n",
        "vae2 = VQGanVAE(\n",
        "    dim = 32,\n",
        "    image_size = 512,\n",
        "    layers = 3,\n",
        "    layer_mults = (1, 2, 4)\n",
        ")\n",
        "\n",
        "unet1 = Unet(\n",
        "    dim = 32,\n",
        "    image_embed_dim = 512,\n",
        "    cond_dim = 128,\n",
        "    channels = 3,\n",
        "    sparse_attn = True,\n",
        "    sparse_attn_window = 2,\n",
        "    dim_mults = (1, 2, 4, 8)\n",
        ")\n",
        "\n",
        "unet2 = Unet(\n",
        "    dim = 32,\n",
        "    image_embed_dim = 512,\n",
        "    channels = 3,\n",
        "    dim_mults = (1, 2, 4, 8, 16),\n",
        "    cond_on_image_embeds = True,\n",
        "    cond_on_text_encodings = False\n",
        ")\n",
        "\n",
        "unet3 = Unet(\n",
        "    dim = 32,\n",
        "    image_embed_dim = 512,\n",
        "    channels = 3,\n",
        "    dim_mults = (1, 2, 4, 8, 16),\n",
        "    cond_on_image_embeds = True,\n",
        "    cond_on_text_encodings = False,\n",
        "    attend_at_middle = False\n",
        ")\n",
        "\n",
        "# decoder, which contains the unet(s) and clip\n",
        "\n",
        "decoder = Decoder(\n",
        "    clip = clip,\n",
        "    vae = (vae1, vae2),                # latent diffusion for unet1 (vae1) and unet2 (vae2), but not for the last unet3\n",
        "    unet = (unet1, unet2, unet3),      # insert unets in order of low resolution to highest resolution (you can have as many stages as you want here)\n",
        "    image_sizes = (256, 512, 1024),    # resolutions, 256 for first unet, 512 for second, 1024 for third\n",
        "    timesteps = 100,\n",
        "    image_cond_drop_prob = 0.1,\n",
        "    text_cond_drop_prob = 0.5\n",
        ").cuda()\n",
        "\n",
        "# mock images (get a lot of this)\n",
        "\n",
        "images = torch.randn(1, 3, 1024, 1024).cuda()\n",
        "\n",
        "# feed images into decoder, specifying which unet you want to train\n",
        "# each unet can be trained separately, which is one of the benefits of the cascading DDPM scheme\n",
        "\n",
        "with decoder.one_unet_in_gpu(1):\n",
        "    loss = decoder(images, unet_number = 1)\n",
        "    loss.backward()\n",
        "\n",
        "with decoder.one_unet_in_gpu(2):\n",
        "    loss = decoder(images, unet_number = 2)\n",
        "    loss.backward()\n",
        "\n",
        "with decoder.one_unet_in_gpu(3):\n",
        "    loss = decoder(images, unet_number = 3)\n",
        "    loss.backward()\n",
        "\n",
        "# do the above for many steps for both unets\n",
        "\n",
        "# then it will learn to generate images based on the CLIP image embeddings\n",
        "\n",
        "# chaining the unets from lowest resolution to highest resolution (thus cascading)\n",
        "\n",
        "mock_image_embed = torch.randn(1, 512).cuda()\n",
        "images = decoder.sample(mock_image_embed) # (1, 3, 1024, 1024)"
      ],
      "metadata": {
        "id": "QXPK78-wCOrJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Training wrapper\n",
        "Decoder Training\n",
        "Training the Decoder may be confusing, as one needs to keep track of an optimizer for each of the Unet(s) separately. Each Unet will also need its own corresponding exponential moving average. The DecoderTrainer hopes to make this simple, as shown below"
      ],
      "metadata": {
        "id": "l4LEBz7MDqcS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from dalle2_pytorch import DALLE2, Unet, Decoder, CLIP, DecoderTrainer\n",
        "\n",
        "clip = CLIP(\n",
        "    dim_text = 512,\n",
        "    dim_image = 512,\n",
        "    dim_latent = 512,\n",
        "    num_text_tokens = 49408,\n",
        "    text_enc_depth = 6,\n",
        "    text_seq_len = 256,\n",
        "    text_heads = 8,\n",
        "    visual_enc_depth = 6,\n",
        "    visual_image_size = 256,\n",
        "    visual_patch_size = 32,\n",
        "    visual_heads = 8\n",
        ").cuda()\n",
        "\n",
        "# mock data\n",
        "\n",
        "text = torch.randint(0, 49408, (32, 256)).cuda()\n",
        "images = torch.randn(32, 3, 256, 256).cuda()\n",
        "\n",
        "# decoder (with unet)\n",
        "\n",
        "unet1 = Unet(\n",
        "    dim = 128,\n",
        "    image_embed_dim = 512,\n",
        "    text_embed_dim = 512,\n",
        "    cond_dim = 128,\n",
        "    channels = 3,\n",
        "    dim_mults=(1, 2, 4, 8)\n",
        ").cuda()\n",
        "\n",
        "unet2 = Unet(\n",
        "    dim = 16,\n",
        "    image_embed_dim = 512,\n",
        "    text_embed_dim = 512,\n",
        "    cond_dim = 128,\n",
        "    channels = 3,\n",
        "    dim_mults = (1, 2, 4, 8, 16),\n",
        "    cond_on_text_encodings = True\n",
        ").cuda()\n",
        "\n",
        "decoder = Decoder(\n",
        "    unet = (unet1, unet2),\n",
        "    image_sizes = (128, 256),\n",
        "    clip = clip,\n",
        "    timesteps = 1000,\n",
        "    condition_on_text_encodings = True\n",
        ").cuda()\n",
        "\n",
        "decoder_trainer = DecoderTrainer(\n",
        "    decoder,\n",
        "    lr = 3e-4,\n",
        "    wd = 1e-2,\n",
        "    ema_beta = 0.99,\n",
        "    ema_update_after_step = 1000,\n",
        "    ema_update_every = 10,\n",
        ")\n",
        "\n",
        "for unet_number in (1, 2):\n",
        "    loss = decoder_trainer(\n",
        "        images,\n",
        "        text = text,\n",
        "        unet_number = unet_number, # which unet to train on\n",
        "        max_batch_size = 4         # gradient accumulation - this sets the maximum batch size in which to do forward and backwards pass - for this example 32 / 4 == 8 times\n",
        "    )\n",
        "\n",
        "    decoder_trainer.update(unet_number) # update the specific unet as well as its exponential moving average\n",
        "\n",
        "# after much training\n",
        "# you can sample from the exponentially moving averaged unets as so\n",
        "\n",
        "mock_image_embed = torch.randn(4, 512).cuda()\n",
        "images = decoder_trainer.sample(mock_image_embed, text = text) # (4, 3, 256, 256)"
      ],
      "metadata": {
        "id": "EcVyePDBCP2N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Diffusion Prior Training\n",
        "Similarly, one can use the DiffusionPriorTrainer to automatically instantiate and keep track of an exponential moving averaged prior."
      ],
      "metadata": {
        "id": "eXKw-Fr7Dvem"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from dalle2_pytorch import DALLE2, DiffusionPriorNetwork, DiffusionPrior, DiffusionPriorTrainer, Unet, Decoder, CLIP\n",
        "\n",
        "clip = CLIP(\n",
        "    dim_text = 512,\n",
        "    dim_image = 512,\n",
        "    dim_latent = 512,\n",
        "    num_text_tokens = 49408,\n",
        "    text_enc_depth = 6,\n",
        "    text_seq_len = 256,\n",
        "    text_heads = 8,\n",
        "    visual_enc_depth = 6,\n",
        "    visual_image_size = 256,\n",
        "    visual_patch_size = 32,\n",
        "    visual_heads = 8\n",
        ").cuda()\n",
        "\n",
        "# mock data\n",
        "\n",
        "text = torch.randint(0, 49408, (512, 256)).cuda()\n",
        "images = torch.randn(512, 3, 256, 256).cuda()\n",
        "\n",
        "# prior networks (with transformer)\n",
        "\n",
        "prior_network = DiffusionPriorNetwork(\n",
        "    dim = 512,\n",
        "    depth = 6,\n",
        "    dim_head = 64,\n",
        "    heads = 8\n",
        ").cuda()\n",
        "\n",
        "diffusion_prior = DiffusionPrior(\n",
        "    net = prior_network,\n",
        "    clip = clip,\n",
        "    timesteps = 100,\n",
        "    cond_drop_prob = 0.2\n",
        ").cuda()\n",
        "\n",
        "diffusion_prior_trainer = DiffusionPriorTrainer(\n",
        "    diffusion_prior,\n",
        "    lr = 3e-4,\n",
        "    wd = 1e-2,\n",
        "    ema_beta = 0.99,\n",
        "    ema_update_after_step = 1000,\n",
        "    ema_update_every = 10,\n",
        ")\n",
        "\n",
        "loss = diffusion_prior_trainer(text, images, max_batch_size = 4)\n",
        "diffusion_prior_trainer.update()  # this will update the optimizer as well as the exponential moving averaged diffusion prior\n",
        "\n",
        "# after much of the above three lines in a loop\n",
        "# you can sample from the exponential moving average of the diffusion prior identically to how you do so for DiffusionPrior\n",
        "\n",
        "image_embeds = diffusion_prior_trainer.sample(text, max_batch_size = 4) # (512, 512) - exponential moving averaged image embeddings"
      ],
      "metadata": {
        "id": "f7HkGPsvCUru"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Bonus\n",
        "Unconditional Training\n",
        "The repository also contains the means to train unconditional DDPM model, or even cascading DDPMs. You simply have to set unconditional = True in the Decoder\n",
        "\n",
        "ex."
      ],
      "metadata": {
        "id": "JcVwxxU3DzDa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from dalle2_pytorch import Unet, Decoder, DecoderTrainer\n",
        "\n",
        "# unet for the cascading ddpm\n",
        "\n",
        "unet1 = Unet(\n",
        "    dim = 128,\n",
        "    dim_mults=(1, 2, 4, 8)\n",
        ").cuda()\n",
        "\n",
        "unet2 = Unet(\n",
        "    dim = 32,\n",
        "    dim_mults = (1, 2, 4, 8, 16)\n",
        ").cuda()\n",
        "\n",
        "# decoder, which contains the unets\n",
        "\n",
        "decoder = Decoder(\n",
        "    unet = (unet1, unet2),\n",
        "    image_sizes = (256, 512),  # first unet up to 256px, then second to 512px\n",
        "    timesteps = 1000,\n",
        "    unconditional = True\n",
        ").cuda()\n",
        "\n",
        "# decoder trainer\n",
        "\n",
        "decoder_trainer = DecoderTrainer(decoder)\n",
        "\n",
        "# images (get a lot of this)\n",
        "\n",
        "images = torch.randn(1, 3, 512, 512).cuda()\n",
        "\n",
        "# feed images into decoder\n",
        "\n",
        "for i in (1, 2):\n",
        "    loss = decoder_trainer(images, unet_number = i)\n",
        "    decoder_trainer.update(unet_number = i)\n",
        "\n",
        "# do the above for many many many many images\n",
        "# then it will learn to generate images\n",
        "\n",
        "images = decoder_trainer.sample(batch_size = 36, max_batch_size = 4) # (36, 3, 512, 512)"
      ],
      "metadata": {
        "id": "oPoClgRKCZ4Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dataloaders\n",
        "Decoder Dataloaders\n",
        "In order to make loading data simple and efficient, we include some general dataloaders that can be used to train portions of the network.\n",
        "\n",
        "Decoder: Image Embedding Dataset\n",
        "When training the decoder (and up samplers if training together) in isolation, you will need to load images and corresponding image embeddings. This dataset can read two similar types of datasets. First, it can read a webdataset that contains .jpg and .npy files in the .tars that contain the images and associated image embeddings respectively. Alternatively, you can also specify a source for the embeddings outside of the webdataset. In this case, the path to the embeddings should contain .npy files with the same shard numbers as the webdataset and there should be a correspondence between the filename of the .jpg and the index of the embedding in the .npy. So, for example, 0001.tar from the webdataset with image 00010509.jpg (the first 4 digits are the shard number and the last 4 are the index) in it should be paralleled by a img_emb_0001.npy which contains a NumPy array with the embedding at index 509.\n",
        "\n",
        "Generating a dataset of this type:\n",
        "\n",
        "Use img2dataset to generate a webdataset.\n",
        "Use clip-retrieval to convert the images to embeddings.\n",
        "Use embedding-dataset-reordering to reorder the embeddings into the expected format.\n",
        "Usage:"
      ],
      "metadata": {
        "id": "SAXOLE2kD2oC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from dalle2_pytorch.dataloaders import ImageEmbeddingDataset, create_image_embedding_dataloader\n",
        "\n",
        "# Create a dataloader directly.\n",
        "dataloader = create_image_embedding_dataloader(\n",
        "    tar_url=\"/path/or/url/to/webdataset/{0000..9999}.tar\", # Uses bracket expanding notation. This specifies to read all tars from 0000.tar to 9999.tar\n",
        "    embeddings_url=\"path/or/url/to/embeddings/folder\",     # Included if .npy files are not in webdataset. Left out or set to None otherwise\n",
        "    num_workers=4,\n",
        "    batch_size=32,\n",
        "    shard_width=4,                                         # If a file in the webdataset shard 3 is named 0003039.jpg, we know the shard width is 4 and the last three digits are the index\n",
        "    shuffle_num=200,                                       # Does a shuffle of the data with a buffer size of 200\n",
        "    shuffle_shards=True,                                   # Shuffle the order the shards are read in\n",
        "    resample_shards=False,                                 # Sample shards with replacement. If true, an epoch will be infinite unless stopped manually\n",
        ")\n",
        "for img, emb in dataloader:\n",
        "    print(img.shape)  # torch.Size([32, 3, 256, 256])\n",
        "    print(emb.shape)  # torch.Size([32, 512])\n",
        "    # Train decoder only as shown above\n",
        "\n",
        "# Or create a dataset without a loader so you can configure it manually\n",
        "dataset = ImageEmbeddingDataset(\n",
        "    urls=\"/path/or/url/to/webdataset/{0000..9999}.tar\",\n",
        "    embedding_folder_url=\"path/or/url/to/embeddings/folder\",\n",
        "    shard_width=4,\n",
        "    shuffle_shards=True,\n",
        "    resample=False\n",
        ")"
      ],
      "metadata": {
        "id": "um0CZsacCdJZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scripts (wip)\n",
        "train_diffusion_prior.py\n",
        "This script allows training the DiffusionPrior on pre-computed text and image embeddings. The working example below elucidates this process. Please note that the script internally passes text_embed and image_embed to the DiffusionPrior, unlike the example below.\n",
        "\n",
        "Usage"
      ],
      "metadata": {
        "id": "PDvs_qkJD6xw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "$ python train_diffusion_prior.py"
      ],
      "metadata": {
        "id": "UmyyU02yCfva"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The most significant parameters for the script are as follows:\n",
        "\n",
        "image-embed-url, default = \"https://mystic.the-eye.eu/public/AI/cah/laion5b/embeddings/laion2B-en/img_emb/\"\n",
        "\n",
        "text-embed-url, default = \"https://mystic.the-eye.eu/public/AI/cah/laion5b/embeddings/laion2B-en/text_emb/\"\n",
        "\n",
        "image-embed-dim, default = 768 - 768 corresponds to the ViT iL/14 embedding size,change it to what your chosen ViT generates\n",
        "\n",
        "learning-rate, default = 1.1e-4\n",
        "\n",
        "weight-decay, default = 6.02e-2\n",
        "\n",
        "max-grad-norm, default = 0.5\n",
        "\n",
        "batch-size, default = 10 ** 4\n",
        "\n",
        "num-epochs, default = 5\n",
        "\n",
        "clip, default = None # Signals the prior to use pre-computed embeddings\n",
        "\n",
        "CLI (wip)"
      ],
      "metadata": {
        "id": "AX1EhQWFEAc2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "$ dream 'sharing a sunset at the summit of mount everest with my dog'"
      ],
      "metadata": {
        "id": "Z16INPtWCj3d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Once built, images will be saved to the same directory the command is invoked\n",
        "\n",
        "template\n",
        "\n",
        "Training CLI (wip)\n",
        "template\n",
        "\n",
        "Todo\n",
        " finish off gaussian diffusion class for latent embedding - allow for prediction of epsilon\n",
        " add what was proposed in the paper, where DDPM objective for image latent embedding predicts x0 directly (reread vq-diffusion paper and get caught up on that line of work)\n",
        " make sure it works end to end to produce an output tensor, taking a single gradient step\n",
        " augment unet so that it can also be conditioned on text encodings (although in paper they hinted this didn't make much a difference)\n",
        " figure out all the current bag of tricks needed to make DDPMs great (starting with the blur trick mentioned in paper)\n",
        " build the cascading ddpm by having Decoder class manage multiple unets at different resolutions\n",
        " add efficient attention in unet\n",
        " be able to finely customize what to condition on (text, image embed) for specific unet in the cascade (super resolution ddpms near the end may not need too much conditioning)\n",
        " offload unets not being trained on to CPU for memory efficiency (for training each resolution unets separately)\n",
        " build out latent diffusion architecture, with the vq-reg variant (vqgan-vae), make it completely optional and compatible with cascading ddpms\n",
        " for decoder, allow ability to customize objective (predict epsilon vs x0), in case latent diffusion does better with prediction of x0\n",
        " use attention-based upsampling https://arxiv.org/abs/2112.11435\n",
        " use inheritance just this once for sharing logic between decoder and prior network ddpms\n",
        " bring in vit-vqgan https://arxiv.org/abs/2110.04627 for the latent diffusion\n",
        " abstract interface for CLIP adapter class, so other CLIPs can be brought in\n",
        " take care of mixed precision as well as gradient accumulation within decoder trainer\n",
        " just take care of the training for the decoder in a wrapper class, as each unet in the cascade will need its own optimizer\n",
        " bring in tools to train vqgan-vae\n",
        " add convnext backbone for vqgan-vae (in addition to vit [vit-vqgan] + resnet)\n",
        " make sure DDPMs can be run with traditional resnet blocks (but leave convnext as an option for experimentation)\n",
        " make sure for the latter unets in the cascade, one can train on crops for learning super resolution (constrain the unet to be only convolutions in that case, or allow conv-like attention with rel pos bias)\n",
        " offer setting in diffusion prior to split time and image embeddings into multiple tokens, configurable, for more surface area during attention\n",
        " make sure resnet hyperparameters can be configurable across unet depth (groups and expansion factor)\n",
        " pull logic for training diffusion prior into a class DiffusionPriorTrainer, for eventual script based + CLI based training\n",
        " make sure the cascading ddpm in the repository can be trained unconditionally, offer a one-line CLI tool for training on a folder of images\n",
        " bring in cross-scale embedding from iclr paper https://github.com/lucidrains/vit-pytorch/blob/main/vit_pytorch/crossformer.py#L14\n",
        " cross embed layers for downsampling, as an option\n",
        " use an experimental tracker agnostic setup, as done here\n",
        " use pydantic for config drive training\n",
        " for both diffusion prior and decoder, all exponential moving averaged models needs to be saved and restored as well (as well as the step number)\n",
        " offer save / load methods on the trainer classes to automatically take care of state dicts for scalers / optimizers / saving versions and checking for breaking changes\n",
        " allow for creation of diffusion prior model off pydantic config classes - consider the same for tracker configs\n",
        " bring in skip-layer excitations (from lightweight gan paper) to see if it helps for either decoder of unet or vqgan-vae training (doesnt work well)\n",
        " test out grid attention in cascading ddpm locally, decide whether to keep or remove https://arxiv.org/abs/2204.01697 (keeping, seems to be fine)\n",
        " allow for unet to be able to condition non-cross attention style as well\n",
        " become an expert with unets, cleanup unet code, make it fully configurable, port all learnings over to https://github.com/lucidrains/x-unet (test out unet² in ddpm repo) - consider https://github.com/lucidrains/uformer-pytorch attention-based unet\n",
        " speed up inference, read up on papers (ddim or diffusion-gan, etc)\n",
        " figure out if possible to augment with external memory, as described in https://arxiv.org/abs/2204.11824\n",
        " interface out the vqgan-vae so a pretrained one can be pulled off the shelf to validate latent diffusion + DALL-E2\n",
        " build infilling"
      ],
      "metadata": {
        "id": "d813j6P1EKPr"
      }
    }
  ]
}